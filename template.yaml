AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Resources:
  function5CEDBB34:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-function5CEDBB34
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: runReport
      CodeUri: src/runReport
      Handler: index.handler
      Runtime: nodejs8.10
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - AWSLambdaENIManagementAccess
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${EnvironmentTagName}/*
      Events:
        api58EC5817GET:
          Type: Api
          Properties:
            Path: /foo
            Method: GET
            RestApiId: !Ref api58EC5817
      VpcConfig:
        SecurityGroupIds:
          - !If
            - virtualNetworkA4A5C96FUseExistingResource
            - !GetAtt virtualNetworkA4A5C96FExistingResource.DefaultSecurityGroup
            - !GetAtt virtualNetworkA4A5C96F.DefaultSecurityGroup
        SubnetIds:
          - !If
            - virtualNetworkA4A5C96FUseExistingResource
            - !GetAtt virtualNetworkA4A5C96FExistingResource.PrivateSubnet1
            - !Ref virtualNetworkA4A5C96FPrivateSubnet1
          - !If
            - virtualNetworkA4A5C96FUseExistingResource
            - !GetAtt virtualNetworkA4A5C96FExistingResource.PrivateSubnet2
            - !Ref virtualNetworkA4A5C96FPrivateSubnet2
      Environment:
        Variables:
          DB_INSTANCE: !If
            - database43225001UseExistingResource
            - !Ref database43225001ExistingResource
            - !Ref database43225001
          DB_ADDRESS: !If
            - database43225001UseExistingResource
            - !GetAtt database43225001ExistingResource.Endpoint.Address
            - !GetAtt database43225001.Endpoint.Address
          DB_PORT: !If
            - database43225001UseExistingResource
            - !GetAtt database43225001ExistingResource.Endpoint.Port
            - !GetAtt database43225001.Endpoint.Port
          DB_ARN: !If
            - database43225001UseExistingResource
            - !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:db:${database43225001ExistingResource}
            - !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:db:${database43225001}
          SECRETS_NAMESPACE: !Sub /${EnvironmentTagName}/
    Metadata:
      StackeryName: runReport
  api58EC5817:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${StackTagName} Environment ${EnvironmentTagName}
        - ResourceName: api58EC5817
      StageName: !Ref EnvironmentAPIGatewayStageName
      DefinitionBody:
        openapi: '3.0'
        info: {}
        paths:
          /foo:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${function5CEDBB34.Arn}/invocations
              responses: {}
      EndpointConfiguration: REGIONAL
  virtualNetworkA4A5C96F:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName}
            - ResourceName: virtualNetworkA4A5C96F
    Condition: virtualNetworkA4A5C96FCreateNewResource
  virtualNetworkA4A5C96FPrivateSubnet1:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      CidrBlock: !Select
        - 0
        - !Cidr
          - 10.0.0.0/16
          - 4
          - 14
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName} Private Subnet 1
            - ResourceName: virtualNetworkA4A5C96F
      VpcId: !Ref virtualNetworkA4A5C96F
    Condition: virtualNetworkA4A5C96FCreateNewResource
  virtualNetworkA4A5C96FPrivateSubnet2:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      CidrBlock: !Select
        - 1
        - !Cidr
          - 10.0.0.0/16
          - 4
          - 14
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName} Private Subnet 2
            - ResourceName: virtualNetworkA4A5C96F
      VpcId: !Ref virtualNetworkA4A5C96F
    Condition: virtualNetworkA4A5C96FCreateNewResource
  virtualNetworkA4A5C96FPublicSubnet1:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      CidrBlock: !Select
        - 2
        - !Cidr
          - 10.0.0.0/16
          - 4
          - 14
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName} Public Subnet 1
            - ResourceName: virtualNetworkA4A5C96F
      VpcId: !Ref virtualNetworkA4A5C96F
    Condition: virtualNetworkA4A5C96FCreateNewResource
  virtualNetworkA4A5C96FPublicSubnet2:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      CidrBlock: !Select
        - 3
        - !Cidr
          - 10.0.0.0/16
          - 4
          - 14
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName} Public Subnet 2
            - ResourceName: virtualNetworkA4A5C96F
      VpcId: !Ref virtualNetworkA4A5C96F
    Condition: virtualNetworkA4A5C96FCreateNewResource
  virtualNetworkA4A5C96FPrivateSubnet1NatGatewayEIP:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    Condition: virtualNetworkA4A5C96FCreateNewResource
  virtualNetworkA4A5C96FPrivateSubnet1NatGateway:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt virtualNetworkA4A5C96FPrivateSubnet1NatGatewayEIP.AllocationId
      SubnetId: !Ref virtualNetworkA4A5C96FPublicSubnet1
    Condition: virtualNetworkA4A5C96FCreateNewResource
  virtualNetworkA4A5C96FPrivateSubnet1RouteTable:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName} Private Subnet 1 Route Table
            - ResourceName: virtualNetworkA4A5C96F
      VpcId: !Ref virtualNetworkA4A5C96F
    Condition: virtualNetworkA4A5C96FCreateNewResource
  virtualNetworkA4A5C96FPrivateSubnet1NatGatewayRoute:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref virtualNetworkA4A5C96FPrivateSubnet1NatGateway
      RouteTableId: !Ref virtualNetworkA4A5C96FPrivateSubnet1RouteTable
    Condition: virtualNetworkA4A5C96FCreateNewResource
  virtualNetworkA4A5C96FPrivateSubnet1RouteTableAssociation:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref virtualNetworkA4A5C96FPrivateSubnet1RouteTable
      SubnetId: !Ref virtualNetworkA4A5C96FPrivateSubnet1
    Condition: virtualNetworkA4A5C96FCreateNewResource
  virtualNetworkA4A5C96FPrivateSubnet2NatGatewayEIP:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    Condition: virtualNetworkA4A5C96FCreateNewResource
  virtualNetworkA4A5C96FPrivateSubnet2NatGateway:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt virtualNetworkA4A5C96FPrivateSubnet2NatGatewayEIP.AllocationId
      SubnetId: !Ref virtualNetworkA4A5C96FPublicSubnet2
    Condition: virtualNetworkA4A5C96FCreateNewResource
  virtualNetworkA4A5C96FPrivateSubnet2RouteTable:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName} Private Subnet 2 Route Table
            - ResourceName: virtualNetworkA4A5C96F
      VpcId: !Ref virtualNetworkA4A5C96F
    Condition: virtualNetworkA4A5C96FCreateNewResource
  virtualNetworkA4A5C96FPrivateSubnet2NatGatewayRoute:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref virtualNetworkA4A5C96FPrivateSubnet2NatGateway
      RouteTableId: !Ref virtualNetworkA4A5C96FPrivateSubnet2RouteTable
    Condition: virtualNetworkA4A5C96FCreateNewResource
  virtualNetworkA4A5C96FPrivateSubnet2RouteTableAssociation:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref virtualNetworkA4A5C96FPrivateSubnet2RouteTable
      SubnetId: !Ref virtualNetworkA4A5C96FPrivateSubnet2
    Condition: virtualNetworkA4A5C96FCreateNewResource
  virtualNetworkA4A5C96FPublicSubnetsInternetGateway:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName} Public Subnets Internet Gateway
            - ResourceName: virtualNetworkA4A5C96F
    Condition: virtualNetworkA4A5C96FCreateNewResource
  virtualNetworkA4A5C96FPublicSubnetsInternetGatewayAttachment:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref virtualNetworkA4A5C96FPublicSubnetsInternetGateway
      VpcId: !Ref virtualNetworkA4A5C96F
    Condition: virtualNetworkA4A5C96FCreateNewResource
  virtualNetworkA4A5C96FPublicSubnetsRouteTable:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName} Public Subnets Route Table
            - ResourceName: virtualNetworkA4A5C96F
      VpcId: !Ref virtualNetworkA4A5C96F
    Condition: virtualNetworkA4A5C96FCreateNewResource
  virtualNetworkA4A5C96FPublicSubnetsInternetGatewayRoute:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref virtualNetworkA4A5C96FPublicSubnetsInternetGateway
      RouteTableId: !Ref virtualNetworkA4A5C96FPublicSubnetsRouteTable
    Condition: virtualNetworkA4A5C96FCreateNewResource
  virtualNetworkA4A5C96FPublicSubnet1RouteTableAssociation:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref virtualNetworkA4A5C96FPublicSubnetsRouteTable
      SubnetId: !Ref virtualNetworkA4A5C96FPublicSubnet1
    Condition: virtualNetworkA4A5C96FCreateNewResource
  virtualNetworkA4A5C96FPublicSubnet2RouteTableAssociation:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref virtualNetworkA4A5C96FPublicSubnetsRouteTable
      SubnetId: !Ref virtualNetworkA4A5C96FPublicSubnet2
    Condition: virtualNetworkA4A5C96FCreateNewResource
  database43225001:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: '5'
      AllowMajorVersionUpgrade: true
      AutoMinorVersionUpgrade: true
      BackupRetentionPeriod: '0'
      CopyTagsToSnapshot: true
      DBInstanceClass: db.t2.micro
      DBSubnetGroupName: !Ref database43225001SubnetGroup
      Engine: mariadb
      EngineVersion: '10.2'
      MasterUsername: root
      MasterUserPassword: ''
      MultiAZ: false
      PubliclyAccessible: false
      StorageType: gp2
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Database ${ResourceName}
            - ResourceName: database43225001
      VPCSecurityGroups:
        - !Ref database43225001SecurityGroup
    Condition: database43225001CreateNewResource
  database43225001SubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Database ${ResourceName} VPC Subnets
        - ResourceName: database43225001
      SubnetIds:
        - !If
          - virtualNetworkA4A5C96FUseExistingResource
          - !GetAtt virtualNetworkA4A5C96FExistingResource.PrivateSubnet1
          - !Ref virtualNetworkA4A5C96FPrivateSubnet1
        - !If
          - virtualNetworkA4A5C96FUseExistingResource
          - !GetAtt virtualNetworkA4A5C96FExistingResource.PrivateSubnet2
          - !Ref virtualNetworkA4A5C96FPrivateSubnet2
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Database ${ResourceName} VPC Subnets
            - ResourceName: database43225001
    Condition: database43225001CreateNewResource
  database43225001SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Database Security Group
      SecurityGroupIngress:
        CidrIp: 0.0.0.0/0
        FromPort: 3306
        IpProtocol: tcp
        ToPort: 3306
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Database ${ResourceName} VPC Security Group
            - ResourceName: database43225001
      VpcId: !If
        - virtualNetworkA4A5C96FUseExistingResource
        - !Ref virtualNetworkA4A5C96FExistingResource
        - !Ref virtualNetworkA4A5C96F
    Condition: database43225001CreateNewResource
  database43225001ExistingResource:
    Type: Custom::StackeryExistingResource
    Properties:
      ServiceToken: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:stackery-agent-commander
      Type: database
    Condition: database43225001UseExistingResource
  virtualNetworkA4A5C96FExistingResource:
    Type: Custom::StackeryExistingResource
    Properties:
      ServiceToken: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:stackery-agent-commander
      Type: virtualNetwork
    Condition: virtualNetworkA4A5C96FUseExistingResource
Parameters:
  StackTagName:
    Type: String
    Description: Stack Name (injected by Stackery at deployment time)
  EnvironmentTagName:
    Type: String
    Description: Environment Name (injected by Stackery at deployment time)
  EnvironmentAPIGatewayStageName:
    Type: String
    Description: Environment name used for API Gateway Stage names (injected by Stackery at deployment time)
Conditions:
  database43225001CreateNewResource: !Equals
    - 'false'
    - 'false'
  database43225001UseExistingResource: !Not
    - Condition: database43225001CreateNewResource
  virtualNetworkA4A5C96FCreateNewResource: !Equals
    - 'false'
    - 'false'
  virtualNetworkA4A5C96FUseExistingResource: !Not
    - Condition: virtualNetworkA4A5C96FCreateNewResource