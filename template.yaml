AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Resources:
  functionA56753A0:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-functionA56753A0
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: runReport
      CodeUri: src/runReport2
      Handler: index.handler
      Runtime: nodejs8.10
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - AWSLambdaENIManagementAccess
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${EnvironmentTagName}/*
      Events:
        timer23977331:
          Type: Schedule
          Properties:
            Schedule: rate(29 minutes)
      VpcConfig:
        SecurityGroupIds:
          - !If
            - virtualNetworkD386093BUseExistingResource
            - !GetAtt virtualNetworkD386093BExistingResource.DefaultSecurityGroup
            - !GetAtt virtualNetworkD386093B.DefaultSecurityGroup
        SubnetIds:
          - !If
            - virtualNetworkD386093BUseExistingResource
            - !GetAtt virtualNetworkD386093BExistingResource.PrivateSubnet1
            - !Ref virtualNetworkD386093BPrivateSubnet1
          - !If
            - virtualNetworkD386093BUseExistingResource
            - !GetAtt virtualNetworkD386093BExistingResource.PrivateSubnet2
            - !Ref virtualNetworkD386093BPrivateSubnet2
      Environment:
        Variables:
          DB_INSTANCE: !If
            - database820B07ABUseExistingResource
            - !Ref database820B07ABExistingResource
            - !Ref database820B07AB
          DB_ADDRESS: !If
            - database820B07ABUseExistingResource
            - !GetAtt database820B07ABExistingResource.Endpoint.Address
            - !GetAtt database820B07AB.Endpoint.Address
          DB_PORT: !If
            - database820B07ABUseExistingResource
            - !GetAtt database820B07ABExistingResource.Endpoint.Port
            - !GetAtt database820B07AB.Endpoint.Port
          DB_ARN: !If
            - database820B07ABUseExistingResource
            - !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:db:${database820B07ABExistingResource}
            - !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:db:${database820B07AB}
          SECRETS_NAMESPACE: !Sub /${EnvironmentTagName}/
    Metadata:
      StackeryName: runReport
  virtualNetworkD386093B:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName}
            - ResourceName: virtualNetworkD386093B
    Condition: virtualNetworkD386093BCreateNewResource
  virtualNetworkD386093BPrivateSubnet1:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      CidrBlock: !Select
        - 0
        - !Cidr
          - 10.0.0.0/16
          - 4
          - 14
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName} Private Subnet 1
            - ResourceName: virtualNetworkD386093B
      VpcId: !Ref virtualNetworkD386093B
    Condition: virtualNetworkD386093BCreateNewResource
  virtualNetworkD386093BPrivateSubnet2:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      CidrBlock: !Select
        - 1
        - !Cidr
          - 10.0.0.0/16
          - 4
          - 14
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName} Private Subnet 2
            - ResourceName: virtualNetworkD386093B
      VpcId: !Ref virtualNetworkD386093B
    Condition: virtualNetworkD386093BCreateNewResource
  virtualNetworkD386093BPublicSubnet1:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      CidrBlock: !Select
        - 2
        - !Cidr
          - 10.0.0.0/16
          - 4
          - 14
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName} Public Subnet 1
            - ResourceName: virtualNetworkD386093B
      VpcId: !Ref virtualNetworkD386093B
    Condition: virtualNetworkD386093BCreateNewResource
  virtualNetworkD386093BPublicSubnet2:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      CidrBlock: !Select
        - 3
        - !Cidr
          - 10.0.0.0/16
          - 4
          - 14
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName} Public Subnet 2
            - ResourceName: virtualNetworkD386093B
      VpcId: !Ref virtualNetworkD386093B
    Condition: virtualNetworkD386093BCreateNewResource
  virtualNetworkD386093BPrivateSubnet1NatGatewayEIP:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    Condition: virtualNetworkD386093BCreateNewResource
  virtualNetworkD386093BPrivateSubnet1NatGateway:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt virtualNetworkD386093BPrivateSubnet1NatGatewayEIP.AllocationId
      SubnetId: !Ref virtualNetworkD386093BPublicSubnet1
    Condition: virtualNetworkD386093BCreateNewResource
  virtualNetworkD386093BPrivateSubnet1RouteTable:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName} Private Subnet 1 Route Table
            - ResourceName: virtualNetworkD386093B
      VpcId: !Ref virtualNetworkD386093B
    Condition: virtualNetworkD386093BCreateNewResource
  virtualNetworkD386093BPrivateSubnet1NatGatewayRoute:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref virtualNetworkD386093BPrivateSubnet1NatGateway
      RouteTableId: !Ref virtualNetworkD386093BPrivateSubnet1RouteTable
    Condition: virtualNetworkD386093BCreateNewResource
  virtualNetworkD386093BPrivateSubnet1RouteTableAssociation:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref virtualNetworkD386093BPrivateSubnet1RouteTable
      SubnetId: !Ref virtualNetworkD386093BPrivateSubnet1
    Condition: virtualNetworkD386093BCreateNewResource
  virtualNetworkD386093BPrivateSubnet2NatGatewayEIP:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    Condition: virtualNetworkD386093BCreateNewResource
  virtualNetworkD386093BPrivateSubnet2NatGateway:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt virtualNetworkD386093BPrivateSubnet2NatGatewayEIP.AllocationId
      SubnetId: !Ref virtualNetworkD386093BPublicSubnet2
    Condition: virtualNetworkD386093BCreateNewResource
  virtualNetworkD386093BPrivateSubnet2RouteTable:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName} Private Subnet 2 Route Table
            - ResourceName: virtualNetworkD386093B
      VpcId: !Ref virtualNetworkD386093B
    Condition: virtualNetworkD386093BCreateNewResource
  virtualNetworkD386093BPrivateSubnet2NatGatewayRoute:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref virtualNetworkD386093BPrivateSubnet2NatGateway
      RouteTableId: !Ref virtualNetworkD386093BPrivateSubnet2RouteTable
    Condition: virtualNetworkD386093BCreateNewResource
  virtualNetworkD386093BPrivateSubnet2RouteTableAssociation:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref virtualNetworkD386093BPrivateSubnet2RouteTable
      SubnetId: !Ref virtualNetworkD386093BPrivateSubnet2
    Condition: virtualNetworkD386093BCreateNewResource
  virtualNetworkD386093BPublicSubnetsInternetGateway:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName} Public Subnets Internet Gateway
            - ResourceName: virtualNetworkD386093B
    Condition: virtualNetworkD386093BCreateNewResource
  virtualNetworkD386093BPublicSubnetsInternetGatewayAttachment:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref virtualNetworkD386093BPublicSubnetsInternetGateway
      VpcId: !Ref virtualNetworkD386093B
    Condition: virtualNetworkD386093BCreateNewResource
  virtualNetworkD386093BPublicSubnetsRouteTable:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName} Public Subnets Route Table
            - ResourceName: virtualNetworkD386093B
      VpcId: !Ref virtualNetworkD386093B
    Condition: virtualNetworkD386093BCreateNewResource
  virtualNetworkD386093BPublicSubnetsInternetGatewayRoute:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref virtualNetworkD386093BPublicSubnetsInternetGateway
      RouteTableId: !Ref virtualNetworkD386093BPublicSubnetsRouteTable
    Condition: virtualNetworkD386093BCreateNewResource
  virtualNetworkD386093BPublicSubnet1RouteTableAssociation:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref virtualNetworkD386093BPublicSubnetsRouteTable
      SubnetId: !Ref virtualNetworkD386093BPublicSubnet1
    Condition: virtualNetworkD386093BCreateNewResource
  virtualNetworkD386093BPublicSubnet2RouteTableAssociation:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref virtualNetworkD386093BPublicSubnetsRouteTable
      SubnetId: !Ref virtualNetworkD386093BPublicSubnet2
    Condition: virtualNetworkD386093BCreateNewResource
  database820B07AB:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: '5'
      AllowMajorVersionUpgrade: true
      AutoMinorVersionUpgrade: true
      BackupRetentionPeriod: '0'
      CopyTagsToSnapshot: true
      DBInstanceClass: db.t2.micro
      DBSubnetGroupName: !Ref database820B07ABSubnetGroup
      Engine: mariadb
      EngineVersion: '10.2'
      MasterUsername: root
      MasterUserPassword: ''
      MultiAZ: false
      PubliclyAccessible: false
      StorageType: gp2
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Database ${ResourceName}
            - ResourceName: database820B07AB
      VPCSecurityGroups:
        - !Ref database820B07ABSecurityGroup
    Condition: database820B07ABCreateNewResource
  database820B07ABSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Database ${ResourceName} VPC Subnets
        - ResourceName: database820B07AB
      SubnetIds:
        - !If
          - virtualNetworkD386093BUseExistingResource
          - !GetAtt virtualNetworkD386093BExistingResource.PrivateSubnet1
          - !Ref virtualNetworkD386093BPrivateSubnet1
        - !If
          - virtualNetworkD386093BUseExistingResource
          - !GetAtt virtualNetworkD386093BExistingResource.PrivateSubnet2
          - !Ref virtualNetworkD386093BPrivateSubnet2
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Database ${ResourceName} VPC Subnets
            - ResourceName: database820B07AB
    Condition: database820B07ABCreateNewResource
  database820B07ABSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Database Security Group
      SecurityGroupIngress:
        CidrIp: 0.0.0.0/0
        FromPort: 3306
        IpProtocol: tcp
        ToPort: 3306
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Database ${ResourceName} VPC Security Group
            - ResourceName: database820B07AB
      VpcId: !If
        - virtualNetworkD386093BUseExistingResource
        - !Ref virtualNetworkD386093BExistingResource
        - !Ref virtualNetworkD386093B
    Condition: database820B07ABCreateNewResource
  database820B07ABExistingResource:
    Type: Custom::StackeryExistingResource
    Properties:
      ServiceToken: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:stackery-agent-commander
      Type: database
      Data: !Ref EnvConfigDBARNAsString
    Condition: database820B07ABUseExistingResource
  virtualNetworkD386093BExistingResource:
    Type: Custom::StackeryExistingResource
    Properties:
      ServiceToken: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:stackery-agent-commander
      Type: virtualNetwork
      Data: !Ref EnvConfigVPCConfigAsString
    Condition: virtualNetworkD386093BUseExistingResource
Parameters:
  StackTagName:
    Type: String
    Description: Stack Name (injected by Stackery at deployment time)
  EnvironmentTagName:
    Type: String
    Description: Environment Name (injected by Stackery at deployment time)
  EnvConfigDBARNAsString:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /<EnvironmentName>/DB_ARN
  EnvConfigVPCConfigAsString:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /<EnvironmentName>/VPC_Config
Conditions:
  database820B07ABCreateNewResource: !Equals
    - 'false'
    - !Ref EnvConfigDBARNAsString
  database820B07ABUseExistingResource: !Not
    - Condition: database820B07ABCreateNewResource
  virtualNetworkD386093BCreateNewResource: !Equals
    - 'false'
    - !Ref EnvConfigVPCConfigAsString
  virtualNetworkD386093BUseExistingResource: !Not
    - Condition: virtualNetworkD386093BCreateNewResource
Metadata:
  EnvConfigParameters:
    EnvConfigDBARNAsString: DB_ARN
    EnvConfigVPCConfigAsString: VPC_Config