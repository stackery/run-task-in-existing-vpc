AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Resources:
  function3FCBBCFB:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-function3FCBBCFB
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: report
      CodeUri: src/report
      Handler: index.handler
      Runtime: nodejs8.10
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - AWSLambdaENIManagementAccess
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${EnvironmentTagName}/*
      Layers: []
      Events:
        timer66F3707B:
          Type: Schedule
          Properties:
            Schedule: rate(29 minutes)
      VpcConfig:
        SecurityGroupIds:
          - !If
            - virtualNetwork135E7282UseExistingResource
            - !GetAtt virtualNetwork135E7282ExistingResource.DefaultSecurityGroup
            - !GetAtt virtualNetwork135E7282.DefaultSecurityGroup
        SubnetIds:
          - !If
            - virtualNetwork135E7282UseExistingResource
            - !GetAtt virtualNetwork135E7282ExistingResource.PrivateSubnet1
            - !Ref virtualNetwork135E7282PrivateSubnet1
          - !If
            - virtualNetwork135E7282UseExistingResource
            - !GetAtt virtualNetwork135E7282ExistingResource.PrivateSubnet2
            - !Ref virtualNetwork135E7282PrivateSubnet2
      Environment:
        Variables:
          DB_INSTANCE: !If
            - databaseAEA12019UseExistingResource
            - !Ref databaseAEA12019ExistingResource
            - !Ref databaseAEA12019
          DB_ADDRESS: !If
            - databaseAEA12019UseExistingResource
            - !GetAtt databaseAEA12019ExistingResource.Endpoint.Address
            - !GetAtt databaseAEA12019.Endpoint.Address
          DB_PORT: !If
            - databaseAEA12019UseExistingResource
            - !GetAtt databaseAEA12019ExistingResource.Endpoint.Port
            - !GetAtt databaseAEA12019.Endpoint.Port
          DB_ARN: !If
            - databaseAEA12019UseExistingResource
            - !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:db:${databaseAEA12019ExistingResource}
            - !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:db:${databaseAEA12019}
          SECRETS_NAMESPACE: !Sub /${EnvironmentTagName}/
    Metadata:
      StackeryName: report
  virtualNetwork135E7282:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName}
            - ResourceName: ExistingVPC
    Condition: virtualNetwork135E7282CreateNewResource
    Metadata:
      StackeryName: ExistingVPC
  virtualNetwork135E7282PrivateSubnet1:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      CidrBlock: !Select
        - 0
        - !Cidr
          - 10.0.0.0/16
          - 4
          - 14
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName} Private Subnet 1
            - ResourceName: ExistingVPC
      VpcId: !Ref virtualNetwork135E7282
    Condition: virtualNetwork135E7282CreateNewResource
  virtualNetwork135E7282PrivateSubnet2:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      CidrBlock: !Select
        - 1
        - !Cidr
          - 10.0.0.0/16
          - 4
          - 14
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName} Private Subnet 2
            - ResourceName: ExistingVPC
      VpcId: !Ref virtualNetwork135E7282
    Condition: virtualNetwork135E7282CreateNewResource
  virtualNetwork135E7282PublicSubnet1:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      CidrBlock: !Select
        - 2
        - !Cidr
          - 10.0.0.0/16
          - 4
          - 14
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName} Public Subnet 1
            - ResourceName: ExistingVPC
      VpcId: !Ref virtualNetwork135E7282
    Condition: virtualNetwork135E7282CreateNewResource
  virtualNetwork135E7282PublicSubnet2:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      CidrBlock: !Select
        - 3
        - !Cidr
          - 10.0.0.0/16
          - 4
          - 14
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName} Public Subnet 2
            - ResourceName: ExistingVPC
      VpcId: !Ref virtualNetwork135E7282
    Condition: virtualNetwork135E7282CreateNewResource
  virtualNetwork135E7282PrivateSubnet1NatGatewayEIP:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    Condition: virtualNetwork135E7282CreateNewResource
  virtualNetwork135E7282PrivateSubnet1NatGateway:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt virtualNetwork135E7282PrivateSubnet1NatGatewayEIP.AllocationId
      SubnetId: !Ref virtualNetwork135E7282PublicSubnet1
    Condition: virtualNetwork135E7282CreateNewResource
  virtualNetwork135E7282PrivateSubnet1RouteTable:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName} Private Subnet 1 Route Table
            - ResourceName: ExistingVPC
      VpcId: !Ref virtualNetwork135E7282
    Condition: virtualNetwork135E7282CreateNewResource
  virtualNetwork135E7282PrivateSubnet1NatGatewayRoute:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref virtualNetwork135E7282PrivateSubnet1NatGateway
      RouteTableId: !Ref virtualNetwork135E7282PrivateSubnet1RouteTable
    Condition: virtualNetwork135E7282CreateNewResource
  virtualNetwork135E7282PrivateSubnet1RouteTableAssociation:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref virtualNetwork135E7282PrivateSubnet1RouteTable
      SubnetId: !Ref virtualNetwork135E7282PrivateSubnet1
    Condition: virtualNetwork135E7282CreateNewResource
  virtualNetwork135E7282PrivateSubnet2NatGatewayEIP:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    Condition: virtualNetwork135E7282CreateNewResource
  virtualNetwork135E7282PrivateSubnet2NatGateway:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt virtualNetwork135E7282PrivateSubnet2NatGatewayEIP.AllocationId
      SubnetId: !Ref virtualNetwork135E7282PublicSubnet2
    Condition: virtualNetwork135E7282CreateNewResource
  virtualNetwork135E7282PrivateSubnet2RouteTable:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName} Private Subnet 2 Route Table
            - ResourceName: ExistingVPC
      VpcId: !Ref virtualNetwork135E7282
    Condition: virtualNetwork135E7282CreateNewResource
  virtualNetwork135E7282PrivateSubnet2NatGatewayRoute:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref virtualNetwork135E7282PrivateSubnet2NatGateway
      RouteTableId: !Ref virtualNetwork135E7282PrivateSubnet2RouteTable
    Condition: virtualNetwork135E7282CreateNewResource
  virtualNetwork135E7282PrivateSubnet2RouteTableAssociation:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref virtualNetwork135E7282PrivateSubnet2RouteTable
      SubnetId: !Ref virtualNetwork135E7282PrivateSubnet2
    Condition: virtualNetwork135E7282CreateNewResource
  virtualNetwork135E7282PublicSubnetsInternetGateway:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName} Public Subnets Internet Gateway
            - ResourceName: ExistingVPC
    Condition: virtualNetwork135E7282CreateNewResource
  virtualNetwork135E7282PublicSubnetsInternetGatewayAttachment:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref virtualNetwork135E7282PublicSubnetsInternetGateway
      VpcId: !Ref virtualNetwork135E7282
    Condition: virtualNetwork135E7282CreateNewResource
  virtualNetwork135E7282PublicSubnetsRouteTable:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName} Public Subnets Route Table
            - ResourceName: ExistingVPC
      VpcId: !Ref virtualNetwork135E7282
    Condition: virtualNetwork135E7282CreateNewResource
  virtualNetwork135E7282PublicSubnetsInternetGatewayRoute:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref virtualNetwork135E7282PublicSubnetsInternetGateway
      RouteTableId: !Ref virtualNetwork135E7282PublicSubnetsRouteTable
    Condition: virtualNetwork135E7282CreateNewResource
  virtualNetwork135E7282PublicSubnet1RouteTableAssociation:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref virtualNetwork135E7282PublicSubnetsRouteTable
      SubnetId: !Ref virtualNetwork135E7282PublicSubnet1
    Condition: virtualNetwork135E7282CreateNewResource
  virtualNetwork135E7282PublicSubnet2RouteTableAssociation:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref virtualNetwork135E7282PublicSubnetsRouteTable
      SubnetId: !Ref virtualNetwork135E7282PublicSubnet2
    Condition: virtualNetwork135E7282CreateNewResource
  databaseAEA12019:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: '5'
      AllowMajorVersionUpgrade: true
      AutoMinorVersionUpgrade: true
      BackupRetentionPeriod: '0'
      CopyTagsToSnapshot: true
      DBInstanceClass: db.t2.micro
      DBSubnetGroupName: !Ref databaseAEA12019SubnetGroup
      Engine: postgres
      EngineVersion: '10.3'
      MasterUsername: root
      MasterUserPassword: ''
      MultiAZ: false
      PubliclyAccessible: false
      StorageType: gp2
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Database ${ResourceName}
            - ResourceName: ExistingDatabase
      VPCSecurityGroups:
        - !Ref databaseAEA12019SecurityGroup
    Condition: databaseAEA12019CreateNewResource
    Metadata:
      StackeryName: ExistingDatabase
  databaseAEA12019SubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Database ${ResourceName} VPC Subnets
        - ResourceName: databaseAEA12019
      SubnetIds:
        - !If
          - virtualNetwork135E7282UseExistingResource
          - !GetAtt virtualNetwork135E7282ExistingResource.PrivateSubnet1
          - !Ref virtualNetwork135E7282PrivateSubnet1
        - !If
          - virtualNetwork135E7282UseExistingResource
          - !GetAtt virtualNetwork135E7282ExistingResource.PrivateSubnet2
          - !Ref virtualNetwork135E7282PrivateSubnet2
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Database ${ResourceName} VPC Subnets
            - ResourceName: databaseAEA12019
    Condition: databaseAEA12019CreateNewResource
  databaseAEA12019SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Database Security Group
      SecurityGroupIngress:
        CidrIp: 0.0.0.0/0
        FromPort: 5432
        IpProtocol: tcp
        ToPort: 5432
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Database ${ResourceName} VPC Security Group
            - ResourceName: ExistingDatabase
      VpcId: !If
        - virtualNetwork135E7282UseExistingResource
        - !Ref virtualNetwork135E7282ExistingResource
        - !Ref virtualNetwork135E7282
    Condition: databaseAEA12019CreateNewResource
  databaseAEA12019ExistingResource:
    Type: Custom::StackeryExistingResource
    Properties:
      ServiceToken: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:stackery-agent-commander
      Type: database
      Data: !Ref EnvConfigDBARNAsString
    Condition: databaseAEA12019UseExistingResource
  virtualNetwork135E7282ExistingResource:
    Type: Custom::StackeryExistingResource
    Properties:
      ServiceToken: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:stackery-agent-commander
      Type: virtualNetwork
      Data: !Ref EnvConfigVPCConfigAsString
    Condition: virtualNetwork135E7282UseExistingResource
Parameters:
  StackTagName:
    Type: String
    Description: Stack Name (injected by Stackery at deployment time)
  EnvironmentTagName:
    Type: String
    Description: Environment Name (injected by Stackery at deployment time)
  EnvConfigVPCConfigAsString:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /<EnvironmentName>/VPC_Config
  EnvConfigDBARNAsString:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /<EnvironmentName>/DB_ARN
Conditions:
  databaseAEA12019CreateNewResource: !Equals
    - 'false'
    - !Ref EnvConfigDBARNAsString
  databaseAEA12019UseExistingResource: !Not
    - Condition: databaseAEA12019CreateNewResource
  virtualNetwork135E7282CreateNewResource: !Equals
    - 'false'
    - !Ref EnvConfigVPCConfigAsString
  virtualNetwork135E7282UseExistingResource: !Not
    - Condition: virtualNetwork135E7282CreateNewResource
Metadata:
  EnvConfigParameters:
    EnvConfigVPCConfigAsString: VPC_Config
    EnvConfigDBARNAsString: DB_ARN